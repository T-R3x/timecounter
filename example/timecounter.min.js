function TimeCounter(){var count=0;var _intervalTimer=undefined;var options=arguments[0]||{};var defaults={autostart:false,hours:0,minutes:0,seconds:0,timeString:'00:00:00'};if(options){var key;for(key in defaults){if(options[key]!==undefined){defaults[key]=options[key];}}}Object.defineProperty(this,'count',{get:function(){return count;},set:function(value){count=value;}});Object.defineProperty(this,'hours',{get:function(){return this.formatNumber(defaults.hours);},set:function(value){defaults.hours=value;}});Object.defineProperty(this,'minutes',{get:function(){return this.formatNumber(defaults.minutes);},set:function(value){defaults.minutes=value;}});Object.defineProperty(this,'seconds',{get:function(){return this.formatNumber(defaults.seconds);},set:function(value){defaults.seconds=value;}});this.setTime(defaults);if(defaults.autostart){this.start();}}TimeCounter.prototype={start:function(){if(this._intervalTimer!==undefined){return false;}console.log('Start time counting with: '+this.getTime());this._intervalTimer=window.setInterval(this.tick,1000,this);},stop:function(){if(this._intervalTimer===undefined){return false;}console.log('Stop time counting at: '+this.getTime());window.clearInterval(this._intervalTimer);this._intervalTimer=undefined;this.reset();},reset:function(){this.count=this.seconds=this.minutes=this.hours=0;},getTime:function(){return[this.hours,this.minutes,this.seconds].join(':');},setTime:function(opts){var options=arguments[0]||opts||{};var hrs=0;var mins=0;var secs=0;if(Object.keys(options).length){if(options.hasOwnProperty('timeString')){var times=options.timeString.split(':');if(times.length===3){hrs=(!isNaN(times[0]))?parseInt(times[0]):0;mins=(!isNaN(times[1]))?parseInt(times[1]):0;secs=(!isNaN(times[2]))?parseInt(times[2]):0;}else{throw new SyntaxError('The given time string is invalid! Please use the following format "hh:mm:ss". Given time is: '+options.timeString);}}else{hrs=(!isNaN(options.hours))?parseInt(options.hours):0;mins=(!isNaN(options.minutes))?parseInt(options.minutes):0;secs=(!isNaN(options.seconds))?parseInt(options.seconds):0;}if(secs>59){throw new Error('Seconds must be between 0 - 59');}if(mins>59){throw new Error('Minutes must be between 0 - 59');}this.hours=hrs;this.minutes=mins;this.seconds=secs;}else{if(opts===undefined){throw new SyntaxError('No arguments was given!');}}},tick:function(timeCounter){timeCounter.count++;timeCounter.seconds++;if(timeCounter.seconds%60===0){timeCounter.seconds=0;timeCounter.minutes++;if(timeCounter.minutes%60===0){timeCounter.minutes=0;timeCounter.hours++;}}timeCounter.triggerTickEvent();},triggerTickEvent:function(){var ev=new CustomEvent('TimeCounter:tick',{'detail':{'time':this.getTime()}});document.dispatchEvent(ev);},formatNumber:function(number){return(number<10)?'0'+number:number;}};